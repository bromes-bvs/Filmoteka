{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-c12874e60291301f.js","src/scripts/libraryBtnActive.js","src/scripts/storage.js","node_modules/@parcel/runtime-js/lib/runtime-0fa22b87bc7d7f90.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"9oqE3\\\":\\\"library.3b7c1246.js\\\",\\\"fJ9hC\\\":\\\"empty-collection-min.be2b13eb.png\\\",\\\"7mVsD\\\":\\\"index.2b5100b0.css\\\",\\\"3yVDC\\\":\\\"index.1c673e10.js\\\"}\"));","import { fetchMovie } from './fetch';\nimport { findGenres, render } from './gallery';\nimport { prepareGalleryInfo, renderFilmList } from './renderFilmList';\nimport { loadFromLS } from './storage.js';\nimport { galleryRef } from './refs';\n\nconst watchedBtn = document.querySelector('[data-id=\"watched-btn\"]');\nconst queueBtn = document.querySelector('[data-id=\"queue-btn\"]');\nconst watchedSet = document.querySelector('.library-buttons__wrapper');\n\nwatchedSet.addEventListener('click', makeActiveBtn);\n\nfunction makeActiveBtn(e) {\n  if (e.target.classList.contains('is-active')) {\n    return;\n  }\n  watchedBtn.classList.toggle('is-active');\n  queueBtn.classList.toggle('is-active');\n  return;\n}\n\n//============= повідомлення при порожній колекції ===============\nconst noImgCollectionUrl = new URL(\n  '../images/gallery/empty-collection-min.png',\n  import.meta.url\n);\n\nfunction emptyCollectionMarkup() {\n  const markupcollection =\n    `<li><img class=\"empty-collection-img\" width=\"240\" src=${noImgCollectionUrl.pathname}></li><li><p class=\"empty-collection-text\">Collection is empty. You need to add a movie.</p></li>`;\n    galleryRef.innerHTML = markupcollection;\n    galleryRef.classList.add('empty-gallery');\n}\n\n//============= Кнопка Watched ====================================\nconst LOCALSTORAGE_KEY_WATCHED = 'watch';\n\nonWatchedBtnClick();\n\nfunction onWatchedBtnClick() {\n  galleryRef.innerHTML = '';\n  if (!localStorage[LOCALSTORAGE_KEY_WATCHED]) {\n    emptyCollectionMarkup();\n    return;\n  }\n \n  if (localStorage[LOCALSTORAGE_KEY_WATCHED]) {\n    const arrayFromLSWatch = loadFromLS(LOCALSTORAGE_KEY_WATCHED);\n    if (arrayFromLSWatch.length === 0) {\n      emptyCollectionMarkup();\n      return;\n    }\n    if (galleryRef.classList.contains('empty-gallery')) {\n      galleryRef.classList.remove('empty-gallery');\n    }\n    const filmPromisesWatch = arrayFromLSWatch.map(id => fetchMovie(id));\n\n    Promise.all(filmPromisesWatch).then(results => {\n      const markup = results\n        .map(\n          ({\n            poster_path,\n            backdrop_path,\n            original_title,\n            title,\n            genres,\n            release_date,\n            vote_average,\n            id,\n          }) => {\n            const genres_ids = genres.map(genre => genre.id);\n            return prepareGalleryInfo(\n              poster_path,\n              backdrop_path,\n              original_title,\n              title,\n              genres_ids,\n              release_date,\n              vote_average,\n              id,\n              findGenres\n            );\n          }\n        )\n        .join('');\n      galleryRef.innerHTML = markup;\n    });\n  }\n}\n\nwatchedBtn.addEventListener('click', onWatchedBtnClick);\n\n//============= Кнопка Queue ====================================\nconst LOCALSTORAGE_KEY_QUEUE = 'queue';\n\nfunction onQueueBtnClick() {\n  galleryRef.innerHTML = '';\n  if (!localStorage[LOCALSTORAGE_KEY_QUEUE]) {\n    emptyCollectionMarkup();\n    return;\n  }\n  if (localStorage[LOCALSTORAGE_KEY_QUEUE]) {\n    const arrayFromLSQueue = loadFromLS(LOCALSTORAGE_KEY_QUEUE);\n    if (arrayFromLSQueue.length === 0) {\n      emptyCollectionMarkup();\n      return;\n    }\n    if (galleryRef.classList.contains('empty-gallery')) {\n      galleryRef.classList.remove('empty-gallery');\n    }\n    const filmPromisesQueue = arrayFromLSQueue.map(id => fetchMovie(id));\n\n    Promise.all(filmPromisesQueue).then(results => {\n      const markup = results\n        .map(\n          ({\n            poster_path,\n            backdrop_path,\n            original_title,\n            title,\n            genres,\n            release_date,\n            vote_average,\n            id,\n          }) => {\n            const genres_ids = genres.map(genre => genre.id);\n            return prepareGalleryInfo(\n              poster_path,\n              backdrop_path,\n              original_title,\n              title,\n              genres_ids,\n              release_date,\n              vote_average,\n              id,\n              findGenres\n            );\n          }\n        )\n        .join('');\n      galleryRef.innerHTML = markup;\n    });\n  }\n}\n\nqueueBtn.addEventListener('click', onQueueBtnClick);\n","export function saveToLS(key, value) {\n   try {\n      const serializedState = JSON.stringify(value);\n      localStorage.setItem(key, serializedState);\n   } catch (error) {\n     console.error(\"Set state error: \", error.message);\n   }\n };\n \n export function loadFromLS(key) {\n   try {\n     const serializedState = localStorage.getItem(key);\n     return serializedState === null ? undefined : JSON.parse(serializedState);\n   } catch (error) {\n     console.error(\"Get state error: \", error.message);\n   }\n };","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"fJ9hC\")).toString();"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$ncrjo","$07f0cd7b2a391dc0$export$6ffe6b83d6e92153","key","serializedState","localStorage","getItem","undefined","error","console","message","$53f513c14ad20b1f$var$watchedBtn","document","querySelector","$53f513c14ad20b1f$var$queueBtn","addEventListener","e","target","classList","contains","toggle","$5c16379c9160f626$exports","URL","resolve","import","meta","url","toString","$53f513c14ad20b1f$var$noImgCollectionUrl","$53f513c14ad20b1f$var$emptyCollectionMarkup","markupcollection","pathname","$1O3u4","galleryRef","innerHTML","add","$53f513c14ad20b1f$var$onWatchedBtnClick","arrayFromLSWatch","remove","filmPromisesWatch","map","fetchMovie","Promise","all","then","results","markup","poster_path","backdrop_path","original_title","title","genres","release_date","vote_average","genres_ids","genre","$a12rj","prepareGalleryInfo","$2zNys","findGenres","join","arrayFromLSQueue","filmPromisesQueue"],"version":3,"file":"library.3b7c1246.js.map"}